[gd_scene load_steps=60 format=3 uid="uid://cqpbstgufd4u8"]

[ext_resource type="PackedScene" uid="uid://cjo70h14cluga" path="res://cenas/envenenado.tscn" id="2_cqgs4"]
[ext_resource type="Texture2D" uid="uid://dl07pvphwbw30" path="res://sprites/Enemy_Animations_Set/enemies-vampire_attack.png" id="2_jmqq5"]
[ext_resource type="Texture2D" uid="uid://cx2syp7lk0imd" path="res://sprites/Enemy_Animations_Set/enemies-vampire_death.png" id="3_schca"]
[ext_resource type="Texture2D" uid="uid://b54dqvj1he4h1" path="res://sprites/Enemy_Animations_Set/enemies-vampire_take_damage.png" id="4_cqgs4"]
[ext_resource type="Texture2D" uid="uid://c14hjf7wdv8n6" path="res://sprites/Enemy_Animations_Set/enemies-vampire_idle.png" id="5_ql5wp"]
[ext_resource type="Texture2D" uid="uid://g3nxh4srs6h1" path="res://sprites/Enemy_Animations_Set/enemies-vampire_movement.png" id="6_o0yfc"]

[sub_resource type="GDScript" id="GDScript_jmqq5"]
script/source = "# esqueleto.gd - Script de Comportamento do Inimigo
# Este script controla a IA e as ações do inimigo esqueleto.
# Ele gerencia o estado (vida, movimento, morte) e a lógica de decisão
# para atacar ou se mover em direção ao jogador durante seu turno.

extends CharacterBody2D

# --- Sinais ---
# Emitido quando o esqueleto completa sua a��ão no turno.
signal action_taken

# --- Constantes ---
const TILE_SIZE = 16
const MOVE_SPEED = 15.0

# --- Atributos ---
@export var db: PackedScene
@export var health: int = 50 # Pontos de vida do esqueleto.
@export var damage: int = 10 # Dano que o esqueleto causa ao jogador.
@export var detection_range: int = 160 # Distância em pixels para detectar o jogador (10 tiles)

# --- Referências ---
@onready var animated_sprite: AnimatedSprite2D = $animacao
@onready var collision_shape: CollisionShape2D = $CollisionShape2D
var player_node: Node2D = null # Referência ao nó do jogador.
var turn_manager = null       # Referência ao TurnManager.

# --- Estado ---
var is_moving: bool = false # Verdadeiro se o esqueleto está se movendo.
var is_dead: bool = false   # Verdadeiro se o esqueleto morreu.
var target_position: Vector2 # Posição alvo para o movimento.

func _ready():
	# Obtém a referência ao jogador e define a posição inicial.
	player_node = get_tree().get_first_node_in_group(\"player\")
	target_position = global_position
	add_to_group(\"enemies\")

func _physics_process(delta):
	# Interpola suavemente a posição do esqueleto até o alvo se estiver se movendo.
	if is_moving:
		if global_position.distance_to(target_position) > 0.1:
			global_position = global_position.lerp(target_position, MOVE_SPEED * delta)
		else:
			# Finaliza o movimento e emite o sinal de ação concluída.
			global_position = target_position
			is_moving = false
			animated_sprite.play(\"idle\")
			emit_signal(\"action_taken\")

# Função principal chamada pelo TurnManager para que o esqueleto execute seu turno.
func take_turn():
	# Um esqueleto morto não faz nada e termina seu turno imediatamente.
	for efeito in $efeitos.get_children():
		efeito.diminuitempo()
	
	
	if is_dead:
		call_deferred(\"emit_signal\", \"action_taken\")
		return

	print_debug(\"--- Turno de %s ---\" % self.name)
	var player_pos = turn_manager.get_player_position()
	var my_pos = global_position
	var distance_to_player = my_pos.distance_to(player_pos)
	print_debug(\"Distância para o jogador: %s, Raio de Detecção: %s\" % [distance_to_player, detection_range])

	# Se o jogador estiver fora de alcance, não faz nada e passa o turno.
	if distance_to_player > detection_range:
		print_debug(\"Ação: Não fazer nada (jogador fora de alcance).\")
		call_deferred(\"emit_signal\", \"action_taken\")
		return

	# Se o jogador estiver dentro do alcance, decide se ataca ou se move.
	if distance_to_player < TILE_SIZE * 1.5:
		print_debug(\"Ação: Atacar o jogador.\")
		_attack_player(player_pos - my_pos)
	else:
		print_debug(\"Ação: Mover em direção ao jogador.\")
		_move_towards_player(player_pos)


# --- Funções de Combate ---

func set_anim (animac: String):
	$animacao.play (animac)
	pass
	
# Reduz a vida do esqueleto ao receber dano.
func take_damage(amount: int):
	if is_dead:
		return
	health -= amount
	print_debug(\"%s recebeu %d de dano, vida restante: %d.\" % [self.name, amount, health])
	if health <= 0:
		_die()
	else:
		set_anim(\"hurt\")
		
		

# Executa a lógica de ataque contra o jogador.
func _attack_player(direction: Vector2):
	_update_animation_direction(direction.normalized())
	var anim_name = \"attack\"
	if animated_sprite.sprite_frames.has_animation(anim_name):
		animated_sprite.play(anim_name)
		if player_node.has_method(\"take_damage\"):
			player_node.take_damage(damage)
		await animated_sprite.animation_finished
	else:
		# Fallback caso a anima��ão de ataque não exista.
		await get_tree().create_timer(0.5).timeout

	var filhodaputa = db.instantiate()
	player_node.get_node(\"debuffs\").add_child(filhodaputa)	
	filhodaputa.position.x = 0
	filhodaputa.position.y = 0
	animated_sprite.play(\"idle\")
	emit_signal(\"action_taken\")

# Altera o estado do esqueleto para 'morto'.
# Desativa sua colisão e executa a animação de morte.
func _die():
	if is_dead: return
	is_dead = true
	print_debug(\"%s está morrendo.\" % self.name)
	if is_instance_valid(collision_shape):
		collision_shape.disabled = true
	
	animated_sprite.play(\"death\")

# --- Funções de Movimento e Auxiliares ---

# Move o esqueleto um passo em direção ao jogador usando o caminho A*.
func _move_towards_player(player_pos: Vector2):
	
	if not turn_manager:
		emit_signal(\"action_taken\")
		return
	
		
	var path = turn_manager.calculate_path(global_position, player_pos)
	print_debug(\"Path for \", self.name, \": \", path)
	if path.size() > 1:
		# Define o próximo passo do caminho como o alvo.
		target_position = path[1]
		is_moving = true
		_update_animation_direction((target_position - global_position).normalized())
		animated_sprite.play(\"walk\")
	else:
		# Se não houver caminho, simplesmente termina o turno.
		call_deferred(\"emit_signal\", \"action_taken\")

# Vira o sprite do esqueleto para a esquerda ou direita com base na direção.
func _update_animation_direction(direction: Vector2):
	if direction.x < -0.1:
		animated_sprite.flip_h = true
	elif direction.x > 0.1:
		animated_sprite.flip_h = false

# Define a referência ao TurnManager.
func set_turn_manager(manager):
	turn_manager = manager
"

[sub_resource type="AtlasTexture" id="AtlasTexture_3y6yg"]
atlas = ExtResource("2_jmqq5")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_j6pse"]
atlas = ExtResource("2_jmqq5")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_f03mu"]
atlas = ExtResource("2_jmqq5")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_8rgo4"]
atlas = ExtResource("2_jmqq5")
region = Rect2(96, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_btn6y"]
atlas = ExtResource("2_jmqq5")
region = Rect2(128, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_rnlqj"]
atlas = ExtResource("2_jmqq5")
region = Rect2(160, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_7vgda"]
atlas = ExtResource("2_jmqq5")
region = Rect2(192, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_1svof"]
atlas = ExtResource("2_jmqq5")
region = Rect2(224, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_04t28"]
atlas = ExtResource("2_jmqq5")
region = Rect2(256, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_sl1m7"]
atlas = ExtResource("2_jmqq5")
region = Rect2(288, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_f7slb"]
atlas = ExtResource("2_jmqq5")
region = Rect2(320, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_yymhq"]
atlas = ExtResource("2_jmqq5")
region = Rect2(352, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_bbv2p"]
atlas = ExtResource("2_jmqq5")
region = Rect2(384, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_xg5i1"]
atlas = ExtResource("2_jmqq5")
region = Rect2(416, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_vw2wb"]
atlas = ExtResource("2_jmqq5")
region = Rect2(448, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_t1x3y"]
atlas = ExtResource("2_jmqq5")
region = Rect2(480, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ry0rp"]
atlas = ExtResource("3_schca")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_awl72"]
atlas = ExtResource("3_schca")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_4o5s3"]
atlas = ExtResource("3_schca")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_vrnta"]
atlas = ExtResource("3_schca")
region = Rect2(96, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_csykc"]
atlas = ExtResource("3_schca")
region = Rect2(128, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_lxeja"]
atlas = ExtResource("3_schca")
region = Rect2(160, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_4utbn"]
atlas = ExtResource("3_schca")
region = Rect2(192, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_mrivi"]
atlas = ExtResource("3_schca")
region = Rect2(224, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_q8tdf"]
atlas = ExtResource("3_schca")
region = Rect2(256, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_bh4gw"]
atlas = ExtResource("3_schca")
region = Rect2(288, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_evg6x"]
atlas = ExtResource("3_schca")
region = Rect2(320, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_5e47o"]
atlas = ExtResource("3_schca")
region = Rect2(352, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_falp2"]
atlas = ExtResource("3_schca")
region = Rect2(384, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_k75wd"]
atlas = ExtResource("3_schca")
region = Rect2(416, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_t2t4s"]
atlas = ExtResource("4_cqgs4")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_d4pth"]
atlas = ExtResource("4_cqgs4")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_wwmsr"]
atlas = ExtResource("4_cqgs4")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqstt"]
atlas = ExtResource("4_cqgs4")
region = Rect2(96, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ydfbn"]
atlas = ExtResource("4_cqgs4")
region = Rect2(128, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_1f7of"]
atlas = ExtResource("5_ql5wp")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_7d0om"]
atlas = ExtResource("5_ql5wp")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ysyo3"]
atlas = ExtResource("5_ql5wp")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_w1l6o"]
atlas = ExtResource("5_ql5wp")
region = Rect2(96, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_7rvx2"]
atlas = ExtResource("5_ql5wp")
region = Rect2(128, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_wb37x"]
atlas = ExtResource("5_ql5wp")
region = Rect2(160, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_u5v7n"]
atlas = ExtResource("6_o0yfc")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ou2p8"]
atlas = ExtResource("6_o0yfc")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_lljpc"]
atlas = ExtResource("6_o0yfc")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_4bnrs"]
atlas = ExtResource("6_o0yfc")
region = Rect2(96, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_a5n3n"]
atlas = ExtResource("6_o0yfc")
region = Rect2(128, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_3qgqp"]
atlas = ExtResource("6_o0yfc")
region = Rect2(160, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ljuvk"]
atlas = ExtResource("6_o0yfc")
region = Rect2(192, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_es2ea"]
atlas = ExtResource("6_o0yfc")
region = Rect2(224, 0, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_3xm2e"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3y6yg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j6pse")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f03mu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8rgo4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_btn6y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rnlqj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7vgda")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1svof")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_04t28")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_sl1m7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f7slb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yymhq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bbv2p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xg5i1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vw2wb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_t1x3y")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ry0rp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_awl72")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4o5s3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vrnta")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_csykc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lxeja")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4utbn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mrivi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_q8tdf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bh4gw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_evg6x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5e47o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_falp2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_k75wd")
}],
"loop": false,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_t2t4s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d4pth")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wwmsr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqstt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ydfbn")
}],
"loop": false,
"name": &"hurt",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1f7of")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7d0om")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ysyo3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_w1l6o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7rvx2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wb37x")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_u5v7n")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ou2p8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lljpc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4bnrs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a5n3n")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3qgqp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ljuvk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_es2ea")
}],
"loop": false,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1yycb"]
size = Vector2(20, 18.57143)

[sub_resource type="OccluderPolygon2D" id="OccluderPolygon2D_4bm5w"]
polygon = PackedVector2Array(5.7142854, 5.714287, 4.285714, 1.66893e-06, 1.4285713, 5.714287)

[node name="vamp" type="CharacterBody2D"]
scale = Vector2(0.7, 0.7)
script = SubResource("GDScript_jmqq5")
db = ExtResource("2_cqgs4")

[node name="animacao" type="AnimatedSprite2D" parent="."]
y_sort_enabled = true
scale = Vector2(0.99999994, 0.99999994)
sprite_frames = SubResource("SpriteFrames_3xm2e")
animation = &"death"
autoplay = "idle"
speed_scale = 1.6
offset = Vector2(3, -6)
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2(0, -1.4285715)
scale = Vector2(0.99999994, 0.99999994)
shape = SubResource("RectangleShape2D_1yycb")
metadata/_edit_lock_ = true

[node name="VisionRayCast" type="RayCast2D" parent="."]
position = Vector2(0, -0.71428454)
target_position = Vector2(0, 16)
metadata/_edit_lock_ = true

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
position = Vector2(0, 1.4285698)
occluder = SubResource("OccluderPolygon2D_4bm5w")
metadata/_edit_lock_ = true

[node name="efeitos" type="Node2D" parent="."]
